name: Front End Continuous Deployment

on:
  push:
    branches:
      - main


jobs:
  Deploy-Jobs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: lksdiycc2025-fe
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{secrets.EKS_CLUSTER_NAME }} --region ${{secrets.AWS_REGION}}

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          sudo cat > newdeployment.yml <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: lksdiycc2025-fe-deployment
          spec:
            selector:
              matchLabels:
                app: lksdiycc2025-fe-pod
            template:
              metadata:
                labels:
                  app: lksdiycc2025-fe-pod
              spec:
                containers:
                - name: lksdiycc2025-fe-container
                  image: ${ECR_REGISTRY}/lksdiycc2025-fe:${IMAGE_TAG}
                  resources:
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
                  ports:
                  - containerPort: 80
          ---

          apiVersion: v1
          kind: Service
          metadata:
            name: lksdiycc2025-fe-service
          spec:
            selector:
              app: lksdiycc2025-fe-pod
            ports:
            - port: 80
              targetPort: 80

          --- 

          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: lksdiycc2025-fe-ingress
            labels:
              name: lksdiycc2025-fe-ingress
            annotations:
              alb.ingress.kubernetes.io/load-balancer-name: lksdiy-fe
              alb.ingress.kubernetes.io/ip-address-type: ipv4
              alb.ingress.kubernetes.io/scheme: internet-facing
              alb.ingress.kubernetes.io/healthcheck-path: / 
              alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
              alb.ingress.kubernetes.io/healthcheck-port: traffic-port
              alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
              alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
              alb.ingress.kubernetes.io/healthy-threshold-count: '3'
              alb.ingress.kubernetes.io/unhealthy-threshold-count: '5'
              alb.ingress.kubernetes.io/success-codes: '200,201,202,204,301,302'
              alb.ingress.kubernetes.io/target-type: ip
              alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'

          spec:
            ingressClassName: ingress-alb-class
            rules:
            - http:
                paths:
                - pathType: Prefix
                  path: "/"
                  backend:
                    service:
                      name: lksdiycc2025-fe-service
                      port: 
                        number: 80

          --- 

          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: lksdiycc2025-fe-autoscalling
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: lksdiycc2025-fe-deployment
            minReplicas: 2
            maxReplicas: 4
            metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 70
          EOF
          kubectl apply -f newdeployment.yml
          rm newdeployment.yml